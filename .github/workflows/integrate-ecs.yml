name: Deploy to Amazon ECS

on:
  push:
    branches:
      - integrate-ecs

env:
  AWS_REGION: ap-southeast-1
  ECS_TASK_DEFINITION: task-mono-stack.json
  WEB_CONTAINER_NAME: mono-stack-ecr
  WEB_IMAGE: 739275471493.dkr.ecr.ap-southeast-1.amazonaws.com/mono-stack-ecr
  ECS_CLUSTER: cluster-mono-stack
  ECS_SERVICE: service-mono-stack
  FE_ENV: production
  FE_PORT: ${{ secrets.FE_PORT }}
  # ECR_REGISTRY: 739275471493.dkr.ecr.ap-southeast-1.amazonaws.com

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  aws-config:
    name: Configure AWS credentials
    runs-on: self-hosted
    steps:
      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_DEPLOY_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEPLOY_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR manually
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.WEB_IMAGE }}

  build-web:
    name: Build Web
    runs-on: self-hosted
    outputs:
      image: ${{ steps.build-web.outputs.image }}
    needs: [aws-config]
    steps:
      - uses: actions/checkout@v2
      - name: Build Web
        id: build-web
        uses: ./.github/actions/build-web
        with:
          image: "${{ env.WEB_IMAGE }}:${{ github.sha }}"

  deploy:
    name: Deploy to ECS
    runs-on: self-hosted
    needs: [build-web, aws-config]
    steps:
      - uses: actions/checkout@v2

      - name: Fill in the new image ID for web container
        id: web-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.WEB_CONTAINER_NAME }}
          image: "${{ env.WEB_IMAGE }}:${{ github.sha }}"

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.web-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
